package com.github.jmchilton.jgalaxy;

import com.github.jmchilton.blend4j.galaxy.GalaxyInstance;
import com.github.jmchilton.blend4j.galaxy.HistoriesClient;
import com.github.jmchilton.blend4j.galaxy.beans.History;
import com.github.jmchilton.blend4j.galaxy.beans.HistoryContents;
import com.github.jmchilton.blend4j.galaxy.beans.HistoryDetails;
import com.github.jmchilton.jgalaxy.InstanceManager.InstanceUpdateListener;
import com.github.jmchilton.jgalaxy.DownloadTasks.DownloadUpdater;
import com.google.common.base.Optional;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class JGalaxy extends javax.swing.JFrame implements InstanceUpdateListener {
  private static final String DEFAULT_HISTORY_CONTENTS_ACTION = "*Select Action*";
  private static final HistoryCellRenderer HISTORY_CELL_RENDERER = new HistoryCellRenderer();
  private static final HistoryContentsListCellRenderer HISTORY_CONTENTS_RENDERER = new HistoryContentsListCellRenderer();
  private static final HistoryContentsTableCellRenderer HISTORY_CONTENTS_TABLE_CELL_RENDERER = new HistoryContentsTableCellRenderer();
  private InstanceManager instanceManager;
  private History currentHistory;
  private Map<String, Runnable> historyContentsActionMap = new HashMap<String, Runnable>();

  public JGalaxy(final Optional<Instance> instance) {
    initComponents();
    instanceManager = new InstanceManager(this);
    if(instance.isPresent()) {
      instanceManager.connectNewInstance(instance.get());
    }
    initData();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    newConnectionDialog = new javax.swing.JDialog();
    galaxyUrlLabel = new javax.swing.JLabel();
    apiKeyLabel = new javax.swing.JLabel();
    apiKeyField = new javax.swing.JTextField();
    galaxyUrlField = new javax.swing.JComboBox();
    connectButton = new javax.swing.JButton();
    downloadDialog = new javax.swing.JDialog();
    bulkDownloadPane = new javax.swing.JScrollPane();
    bulkDownloadTable = new javax.swing.JTable();
    bulkDownloadButton = new javax.swing.JButton();
    downloadDestinationField = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    jSeparator2 = new javax.swing.JSeparator();
    downloadDestinationChooser = new javax.swing.JFileChooser();
    jSeparator1 = new javax.swing.JSeparator();
    jLabel1 = new javax.swing.JLabel();
    historiesPane = new javax.swing.JScrollPane();
    historiesList = new javax.swing.JList();
    historyContentsLabel = new javax.swing.JLabel();
    historyContentsPane = new javax.swing.JScrollPane();
    historyContentsList = new javax.swing.JList();
    historyContentsActions = new javax.swing.JComboBox();
    menuBar = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    exitMenuItem = new javax.swing.JMenuItem();
    connectionMenu = new javax.swing.JMenu();
    newConnectionMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    aboutMenuItem = new javax.swing.JMenuItem();

    galaxyUrlLabel.setText("Galaxy URL");

    apiKeyLabel.setText("API Key");

    galaxyUrlField.setEditable(true);
    galaxyUrlField.setActionCommand("");

    connectButton.setText("Connect");
    connectButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connectButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout newConnectionDialogLayout = new javax.swing.GroupLayout(newConnectionDialog.getContentPane());
    newConnectionDialog.getContentPane().setLayout(newConnectionDialogLayout);
    newConnectionDialogLayout.setHorizontalGroup(
      newConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(newConnectionDialogLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(newConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(newConnectionDialogLayout.createSequentialGroup()
            .addGroup(newConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(galaxyUrlLabel)
              .addComponent(apiKeyLabel))
            .addGap(18, 18, 18)
            .addGroup(newConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(apiKeyField)
              .addComponent(galaxyUrlField, 0, 272, Short.MAX_VALUE)))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newConnectionDialogLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(connectButton)))
        .addContainerGap())
    );
    newConnectionDialogLayout.setVerticalGroup(
      newConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(newConnectionDialogLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(newConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(galaxyUrlLabel)
          .addComponent(galaxyUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(newConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(apiKeyLabel)
          .addComponent(apiKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(connectButton)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    bulkDownloadTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Dataset", "Filename", "Status"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean [] {
        false, true, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    bulkDownloadPane.setViewportView(bulkDownloadTable);
    bulkDownloadTable.getColumnModel().getColumn(0).setCellRenderer(HISTORY_CONTENTS_TABLE_CELL_RENDERER);
    bulkDownloadTable.getColumnModel().getColumn(2).setCellRenderer(new ProgressRenderer());

    bulkDownloadButton.setText("Download");
    bulkDownloadButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bulkDownloadButtonActionPerformed(evt);
      }
    });

    downloadDestinationField.setText(".");
    downloadDestinationField.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        downloadDestinationFieldMouseClicked(evt);
      }
    });

    jLabel2.setText("Destination");

    jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

    javax.swing.GroupLayout downloadDialogLayout = new javax.swing.GroupLayout(downloadDialog.getContentPane());
    downloadDialog.getContentPane().setLayout(downloadDialogLayout);
    downloadDialogLayout.setHorizontalGroup(
      downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(downloadDialogLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(downloadDialogLayout.createSequentialGroup()
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(downloadDestinationField)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(bulkDownloadButton))
          .addComponent(bulkDownloadPane))
        .addContainerGap())
    );
    downloadDialogLayout.setVerticalGroup(
      downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(downloadDialogLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(bulkDownloadPane, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(bulkDownloadButton)
            .addComponent(downloadDestinationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel2)))
        .addContainerGap())
    );

    downloadDestinationChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
    downloadDestinationChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    downloadDestinationChooser.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        downloadDestinationChooserActionPerformed(evt);
      }
    });

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

    jLabel1.setText("Histories");

    historiesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    historiesList.setCellRenderer(HISTORY_CELL_RENDERER);
    historiesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        historiesListValueChanged(evt);
      }
    });
    historiesPane.setViewportView(historiesList);

    historyContentsLabel.setText("Datasets");

    historyContentsList.setCellRenderer(HISTORY_CONTENTS_RENDERER);
    historyContentsPane.setViewportView(historyContentsList);

    historyContentsActions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "*Select Action*" }));
    historyContentsActions.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        historyContentsActionsActionPerformed(evt);
      }
    });

    jMenu1.setText("File");

    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuItemActionPerformed(evt);
      }
    });
    jMenu1.add(exitMenuItem);

    menuBar.add(jMenu1);

    connectionMenu.setText("Connection");

    newConnectionMenuItem.setText("New Connection...");
    newConnectionMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newConnectionMenuItemActionPerformed(evt);
      }
    });
    connectionMenu.add(newConnectionMenuItem);

    menuBar.add(connectionMenu);

    helpMenu.setMnemonic('h');
    helpMenu.setText("Help");

    aboutMenuItem.setMnemonic('a');
    aboutMenuItem.setText("About");
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(historiesPane)
          .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(historyContentsActions, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(historyContentsPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(historyContentsLabel))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jSeparator1)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(historyContentsLabel)
          .addComponent(jLabel1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(historyContentsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(historyContentsActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(historiesPane))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void initData() {
    initGalaxyUrls();
    initInstances();
    initHistoryContentsActions();
  }
  
  private void initInstances() {
    boolean firstInstance = true;
    for(final Instance instance : instanceManager.getInstances()) {
      if(firstInstance) {
        connectionMenu.addSeparator();
        firstInstance = false;
      }
      final JMenuItem item = new JMenuItem();
      item.setText(String.format("%s@%s", instance.getApiKey(), instance.getUrl()));
      item.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent ae) {
          instanceManager.connectNewInstance(instance.getUrl(), instance.getApiKey());
        }
      });
      connectionMenu.add(item);
    }
  }

  private void initHistoryContentsActions() {
    historyContentsActionMap.put("Bulk Download", new Runnable() {
      public void run() {
        bulkDownload();
      }
    });
    for(final String actionLabel : historyContentsActionMap.keySet()) {
      historyContentsActions.addItem(actionLabel);      
    }
  }
  
  private void initGalaxyUrls() {
    final DefaultComboBoxModel model = ((DefaultComboBoxModel) galaxyUrlField.getModel());
    for(final Map.Entry<String, String> entry : instanceManager.getStockGalaxyInstances().entrySet()) {
      final String url = entry.getKey();
      model.addElement(url);
    }
  }

  private void newConnectionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConnectionMenuItemActionPerformed
    newConnectionDialog.pack();
    newConnectionDialog.setVisible(true);
  }//GEN-LAST:event_newConnectionMenuItemActionPerformed

  private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
    System.exit(0);
  }//GEN-LAST:event_exitMenuItemActionPerformed

  private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
    newConnectionDialog.setVisible(false);
    instanceManager.connectNewInstance(galaxyUrlField.getSelectedItem().toString(), apiKeyField.getText());
  }//GEN-LAST:event_connectButtonActionPerformed

  private void historyContentsActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyContentsActionsActionPerformed
    final String actionLabel = historyContentsActions.getSelectedItem().toString();
    if(!actionLabel.equals(DEFAULT_HISTORY_CONTENTS_ACTION)) {
      historyContentsActionMap.get(actionLabel).run();      
    }
  }//GEN-LAST:event_historyContentsActionsActionPerformed

  private void historiesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_historiesListValueChanged
    final History history = (History) historiesList.getSelectedValue();
    setHistory(history);
  }//GEN-LAST:event_historiesListValueChanged

  private void bulkDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bulkDownloadButtonActionPerformed
    final File destinationDirectory = new File(downloadDestinationField.getText());    
    new DownloadTasks(destinationDirectory, getBulkDownloads(), currentHistory, getHistoriesClient(),  new DownloadUpdater() {

      public void setProgress(int index, int percentComplete) {
        bulkDownloadTable.setValueAt(percentComplete, index, 2);
      }
      
    }).execute();
  }//GEN-LAST:event_bulkDownloadButtonActionPerformed

  private void downloadDestinationChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadDestinationChooserActionPerformed
    File downloadDestination = downloadDestinationChooser.getSelectedFile();
    downloadDestinationField.setText(downloadDestination.getPath());
  }//GEN-LAST:event_downloadDestinationChooserActionPerformed

  private void downloadDestinationFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadDestinationFieldMouseClicked
    downloadDestinationChooser.showOpenDialog(this);
  }//GEN-LAST:event_downloadDestinationFieldMouseClicked

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(JGalaxy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(JGalaxy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(JGalaxy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(JGalaxy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    final Optional<Instance> instance;
    if(args.length >= 2) {
      instance = Optional.of(new Instance());
      instance.get().setUrl(args[args.length - 2]);
      instance.get().setApiKey(args[args.length - 1]);
    } else {
      instance = Optional.absent();
    }

    for(final String arg : args) {
      if(arg.equals("--no-check-certificate")) {
        System.out.println("Disabling certificate");
        Ssl.disableCertificateCheck();
      }
    }

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new JGalaxy(instance).setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JTextField apiKeyField;
  private javax.swing.JLabel apiKeyLabel;
  private javax.swing.JButton bulkDownloadButton;
  private javax.swing.JScrollPane bulkDownloadPane;
  private javax.swing.JTable bulkDownloadTable;
  private javax.swing.JButton connectButton;
  private javax.swing.JMenu connectionMenu;
  private javax.swing.JFileChooser downloadDestinationChooser;
  private javax.swing.JTextField downloadDestinationField;
  private javax.swing.JDialog downloadDialog;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JComboBox galaxyUrlField;
  private javax.swing.JLabel galaxyUrlLabel;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JList historiesList;
  private javax.swing.JScrollPane historiesPane;
  private javax.swing.JComboBox historyContentsActions;
  private javax.swing.JLabel historyContentsLabel;
  private javax.swing.JList historyContentsList;
  private javax.swing.JScrollPane historyContentsPane;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JSeparator jSeparator2;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JDialog newConnectionDialog;
  private javax.swing.JMenuItem newConnectionMenuItem;
  // End of variables declaration//GEN-END:variables

  private Map<HistoryContents, String> getBulkDownloads() {
    final Map<HistoryContents, String> downloads = Maps.newLinkedHashMap();
      final DefaultTableModel model = getBulkDownloadModel();
      final int rowCount = model.getRowCount();
      for(int i = 0; i < rowCount; i++) {
        final HistoryContents contents = (HistoryContents) model.getValueAt(i, 0);
        final String filename = (String) model.getValueAt(i, 1);
        downloads.put(contents, filename);
      }
    return downloads;
  }
  
  public void update() {
    loadHistories();
  }

  private void loadHistories() {
    historiesList.removeAll();   
    final Vector<History> histories = new Vector<History>();
    for(final History history : getHistoriesClient().getHistories()) {
      histories.add(history);
    }
    historiesList.setListData(histories);
  }
  
  private void loadContents() {
    historyContentsList.removeAll();
    final Vector<HistoryContents> historyContentsVector = new Vector<HistoryContents>();
    final String historyId = this.currentHistory.getId();
    final HistoryDetails details = getHistoriesClient().showHistory(historyId);
    final Set<String> okIds = Sets.newHashSet(details.getStateIds().get("ok"));
    for(final HistoryContents historyContents : getHistoriesClient().showHistoryContents(historyId)) {
      if(okIds.contains(historyContents.getId())) {
        historyContentsVector.add(historyContents);
      }
    }
    historyContentsList.setListData(historyContentsVector);
  }
  
  private List<HistoryContents> getSelectedHistoryContentsList() {    
    final List<HistoryContents> historyContentList = Lists.newArrayList();
    for(Object historyContentsObject : this.historyContentsList.getSelectedValues()) {
      historyContentList.add((HistoryContents) historyContentsObject);
    }
    return historyContentList;
  }
  
  private HistoriesClient getHistoriesClient() {
    return this.instanceManager.getCurrentInstance().getHistoriesClient();
  }
  
  private void setHistory(final History history) {
    this.currentHistory = history;
    if(history != null) {
      loadContents();
    }
  }
  
  private DefaultTableModel getBulkDownloadModel() {
    final DefaultTableModel model = (DefaultTableModel) bulkDownloadTable.getModel();    
    return model;
  }
  
  private void bulkDownload() {
    if(getSelectedHistoryContentsList().isEmpty()) {
      JOptionPane.showMessageDialog(this, "Must select one or more datasets to download.", "Warning", JOptionPane.WARNING_MESSAGE);
      return;
    }
    final DefaultTableModel model = getBulkDownloadModel();
    model.setNumRows(0);
    for(final HistoryContents historyContents : getSelectedHistoryContentsList()) {
      model.addRow(new Object[] {historyContents, historyContents.getName(), -1});
    }
    downloadDialog.pack();
    downloadDialog.setVisible(true);
  }
  
}
